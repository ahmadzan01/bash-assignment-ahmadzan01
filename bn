#!/bin/bash
#
# Naqeeb Ahmadzan, McMaster University, 2024
#
# Format: bn "year" "gender"
# Expected output: "year": "name" ranked "rank" out of "count" "gender" names.
#
# This utility script returns the rank of a name in a specific year
# by comparing it to the ranks of other names


# ERRORS/HELP ----------------------------------------------------------------

# Prints out the usage of this script
#
# PARAMS: $1 = optional exit code
# RETURNS: usage of script
#          optional exit code
usage() {
    echo "bn <year> <assigned gender: f|F|m|M|b|B>" >&2
    if [[ ! $# -eq 0 ]]
    then
        exit $1
    fi
}

# Prints out the help menu of this script
#
# PARAMS: none
# RETURNS: help menu script
help() {
    echo "bn [v1.0.0]"
    echo ""
    echo "Overview:"
    echo "bn is a bash script that is used to determine the"
    echo "ranks of names among others in a specificed year "
    echo "from 1880 to 2022."
    echo ""
    echo "Usage:"
    usage
    echo ""
    echo "Argument Uses:"
    echo "<year>: The year at which the script searches the names in"
    echo "<assigned gender>: The gender to compare the name's rank"
    echo " - m/M: Males"
    echo " - f/F: Females"
    echo " - b/B: Males and Females"
    echo ""
}

# Help menu
if [[ $1 == "--help" ]]
then
    help

# Not right number of arguments
elif [[ $# != 2 ]]
then
    usage 1

# Badly formatted year
elif [[ ! $1 =~ ^[1-9][0-9]{3}$ ]]
then
    echo "Badly formatted assigned year: $1" >&2
    usage 2
    
# Badly formatted gender
elif [[ ! $2 =~ ^[fFmMbB]{1}$ ]]
then
    echo "Badly formatted assigned gender: $2" >&2
    usage 2

# No data for year
elif [[ $1 -lt 1880 || $1 -gt 2022 ]]
then
    echo "No data for $1" >&2
    exit 4
fi

# DATA COLLECTION -------------------------------------------------------

# Male name data
male_name_data=$(grep -i -E "^[a-z]+,[M],[1-9][0-9]*" "./us_baby_names/yob$1.txt")

# Female name data
female_name_data=$(grep -i -E "^[a-z]+,[F],[1-9][0-9]*" "./us_baby_names/yob$1.txt")

# Total male name count
total_male_count=$(grep -i -E "^[a-z]+,[M],[1-9][0-9]*" "./us_baby_names/yob$1.txt" | wc -l | xargs)

# Total female name count
total_female_count=$(grep -i -E "^[a-z]+,[F],[1-9][0-9]*" "./us_baby_names/yob$1.txt" | wc -l | xargs)

# Prints out the ranking of the name among others in a specific year for a gender
#
# PARAMS: $1 = name
#         $2 = gender
#         $3 = year
# RETURNS: ranking of name among others

rank_name() {
    gender_type=""
    total_count=0
    name_data=""
    if [[ $2 == "m" || $2 == "M" ]]
    then
        gender_type="male"
        total_count=$((total_male_count))
        name_data=$male_name_data
    elif [[ $2 == "f" || $2 == "F" ]]
    then
        gender_type="female"
        total_count=$((total_female_count))
        name_data=$female_name_data
    fi

    name_rank=1
    found_name="F"
    while read line
    do
        if echo "$line" | grep -i -E "^$1,[$2],[1-9][0-9]*" > /dev/null
        then
            found_name="T"
            echo "$3: $1 ranked $name_rank out of $total_count $gender_type names."
            break
        else
            name_rank=$((name_rank + 1))
        fi
    done <<< "$name_data"

    if [[ $found_name == "F" ]]
    then
        echo "$3: $1 not found among $gender_type names"
    fi
}

# Read names from each line
while read name_line
do
    # Check if all names are valid
    for single_name in $name_line
    do
        # Not valid name
        if [[ ! $single_name =~ ^[A-Za-z]+$ ]]
        then
            echo "Badly formatted name: $single_name" >&2
            exit 3
        fi
    done

    # Search for names in data
    for single_name in $name_line
    do
        if [[ $2 == "m" || $2 == "M" ]]
        then
            rank_name $single_name "M" $1 
        elif [[ $2 == "f" || $2 == "F" ]]
        then
            rank_name $single_name "F" $1
        elif [[ $2 == "b" || $2 == "B" ]]
        then
            rank_name $single_name "M" $1
            rank_name $single_name "F" $1
        fi
    done
done
